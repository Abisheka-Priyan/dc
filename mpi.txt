//MPI Matrix Multiplication 

#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#include <iostream>
using namespace std;
#define N 4
int main(int argc, char **argv) {
int rank, size;
int a[N][N], b[N][N], c[N][N];
int i, j, k, sum;
MPI_Init(&argc, &argv);
MPI_Comm_rank(MPI_COMM_WORLD, &rank);
MPI_Comm_size(MPI_COMM_WORLD, &size);
if (size != 2) {
fprintf(stderr, "This program requires exactly 2 processes.\n");
MPI_Abort(MPI_COMM_WORLD, 1);
}
for (i = 0; i < N; i++) {
for (j = 0; j < N; j++) {
a[i][j] = i+j;
b[i][j] = i-j;
c[i][j] = 0;
}
}
if(rank==0)
{
cout<<"Matrix A: "<<endl;
for(int i=0;i<N;i++)
{
cout<<endl;
for (int j=0;j<N;j++)
{
cout<<a[i][j]<<" ";
}
}
cout<<endl<<endl;
cout<<"Matrix B: "<<endl;
for(int i=0;i<N;i++)
{
cout<<endl;
for (int j=0;j<N;j++)
{
cout<<b[i][j]<<" ";
}
}
cout<<endl<<endl;
}

// scatter matrix A to process 0 and B to process 1

MPI_Scatter(a, N*N/2, MPI_INT, a, N*N/2, MPI_INT, 0, MPI_COMM_WORLD);
MPI_Scatter(b, N*N/2, MPI_INT, b, N*N/2, MPI_INT, 1, MPI_COMM_WORLD);

// compute matrix multiplication
for (i = 0; i < N/2; i++) {
for (j = 0; j < N; j++) {
sum = 0;
for (k = 0; k < N; k++) {
sum += a[i][k] * b[k][j];
}
c[i][j] = sum;
}
}





// gather results from both processes

MPI_Gather(c, N*N/2, MPI_INT, c, N*N/2, MPI_INT, 0, MPI_COMM_WORLD);

// print result on process 0

if (rank == 0) {
printf("Result of Matrix Multiplication :\n");
for (i = 0; i < N; i++) {
for (j = 0; j < N; j++) {
printf("%d ", c[i][j]);
}
printf("\n");
}
}
MPI_Finalize();
return 0;
}

